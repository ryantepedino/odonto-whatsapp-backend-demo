// server.js ‚Äî Data Tech | OdontoBot DEMO (Twilio Sandbox) ‚Äî CommonJS

require('dotenv').config();

const express = require('express');
const twilio  = require('twilio');
const fs      = require('fs');

const app  = express();
const PORT = process.env.PORT || 3000;

// Twilio envia application/x-www-form-urlencoded
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// ===== Config DEMO/Handoff =====
const WHATS_HUMANO   = process.env.WHATS_HUMANO || 'https://wa.me/5599999999999';
const DEMO_MODE_RAW  = String(process.env.DEMO_MODE || 'true').toLowerCase();
const IS_DEMO        = ['on','true','1','yes'].includes(DEMO_MODE_RAW);

// ===== Health =====
app.get('/health', (_req, res) => res.status(200).send('ok'));

// ===== Mem√≥ria em RAM (stateful por usu√°rio) =====
const sessions = new Map(); // key => { step, period, slot, name }

function getKeyFromBody(b) {
  if (b.WaId) return `wa:${b.WaId}`;        // ID est√°vel do WhatsApp dado pela Twilio
  if (b.From) return String(b.From);        // fallback
  return 'anon';
}
function getSession(key) {
  if (!sessions.has(key)) sessions.set(key, { step: 'menu' });
  return sessions.get(key);
}
function resetSession(key) { sessions.set(key, { step: 'menu' }); }

function saveLead({ key, from, name, period, slot }) {
  try {
    const path   = './leads.csv';
    const header = 'timestamp,key,from,name,period,slot,channel\n';
    const line   = `${new Date().toISOString()},${JSON.stringify(key)},${JSON.stringify(from)},"${name}",${period},"${slot}",twilio-sandbox\n`;
    if (!fs.existsSync(path)) fs.writeFileSync(path, header, 'utf8');
    fs.appendFileSync(path, line, 'utf8');
  } catch (e) {
    console.error('Erro ao salvar lead:', e);
  }
}

// ===== Textos e slots de exemplo (DEMO) =====
const MENU_TXT =
  'Ol√°! üòä Sou a assistente da Cl√≠nica Sorriso Nova Era.\n' +
  '1) Agendar consulta\n' +
  '2) Conv√™nios/valores\n' +
  '3) Orienta√ß√µes pr√©/p√≥s\n' +
  '4) Falar com atendente';

const CONVENIOS_TXT =
  'Conv√™nios aceitos (DEMO): OdontoPrev, Amil Dental, Unimed Odonto.\n' +
  'Cobertura t√≠pica: avalia√ß√£o, limpeza, restaura√ß√µes simples.\n' +
  'Quer marcar uma *avalia√ß√£o* pelo conv√™nio? Responda *sim* ou *n√£o*.';

const SLOTS = {
  'manh√£': ['Ter√ßa 09:30 ‚Äì Dra. Ana', 'Quinta 10:15 ‚Äì Dr. Paulo'],
  'tarde': ['Quarta 15:00 ‚Äì Dra. Ana', 'Sexta 16:30 ‚Äì Dr. Paulo'],
};

// ===== Webhook Twilio WhatsApp (DEMO sem OpenAI) =====
app.post('/twilio/whatsapp', async (req, res) => {
  const b       = req.body || {};
  const textRaw = String(b.Body ?? '').trim();
  const text    = textRaw.toLowerCase();
  const key     = getKeyFromBody(b);        // chave est√°vel de sess√£o
  const from    = b.From || '';

  const MessagingResponse = twilio.twiml.MessagingResponse;
  const twiml = new MessagingResponse();

  const s = getSession(key);
  console.log(`[DEMO] key=${key} step=${s.step} text="${textRaw}"`);

  // ---- atalhos universais ----
  if (/^menu$|^0$/.test(text)) {
    resetSession(key);
    twiml.message(MENU_TXT);
    return res.type('text/xml').status(200).send(twiml.toString());
  }
  if (/atendente|humano/i.test(textRaw)) {
    twiml.message(`Claro! Vou te encaminhar: ${WHATS_HUMANO}`);
    return res.type('text/xml').status(200).send(twiml.toString());
  }

  // ---- estado inicial / menu ----
  if (s.step === 'menu') {
    if (['1', 'agendar', 'agenda'].includes(text)) {
      s.step = 'ask_period';
      twiml.message('Perfeito! ‚ú® Prefere *manh√£* ou *tarde*?');
      return res.type('text/xml').status(200).send(twiml.toString());
    }
    if (['2', 'convenios', 'conv√™nios', 'conv√™nio', 'conv√™nio/valores', 'conv√™nios/valores'].includes(text)) {
      s.step = 'conv_yesno';
      twiml.message(CONVENIOS_TXT);
      return res.type('text/xml').status(200).send(twiml.toString());
    }
    if (['3', 'pr√©', 'pre', 'pre/p√≥s', 'pr√©/p√≥s', 'orienta√ß√µes', 'orientacoes'].includes(text)) {
      twiml.message('Pr√©-limpeza: escove normalmente, evite caf√©/vinho 3h antes, traga documento e carteirinha. Quer agendar? Digite *1* (Agendar) ou *menu*.');
      return res.type('text/xml').status(200).send(twiml.toString());
    }
    if (['4', 'atendente'].includes(text)) {
      twiml.message(`Claro! Vou te encaminhar: ${WHATS_HUMANO}`);
      return res.type('text/xml').status(200).send(twiml.toString());
    }
    // fallback do menu
    twiml.message(MENU_TXT);
    return res.type('text/xml').status(200).send(twiml.toString());
  }

  // ---- fluxo vindo de Conv√™nios ----
  if (s.step === 'conv_yesno') {
    if (['sim', 's', 'quero', 'ok', 'yes'].includes(text)) {
      s.step = 'ask_period';
      twiml.message('√ìtimo! Para avalia√ß√£o pelo conv√™nio, prefere *manh√£* ou *tarde*?');
      return res.type('text/xml').status(200).send(twiml.toString());
    }
    if (['nao', 'n√£o', 'n', 'no'].includes(text)) {
      resetSession(key);
      twiml.message('Sem problemas! Quando quiser, digite *menu* para come√ßar de novo.');
      return res.type('text/xml').status(200).send(twiml.toString());
    }
    twiml.message('Responda *sim* para agendar avalia√ß√£o pelo conv√™nio, ou *n√£o* para voltar.');
    return res.type('text/xml').status(200).send(twiml.toString());
  }

  // ---- escolher per√≠odo ----
  if (s.step === 'ask_period') {
    const sayManha = /manh(a|√£)/.test(text);
    const sayTarde = /tarde/.test(text);
    if (!sayManha && !sayTarde) {
      twiml.message('Para continuar, responda *manh√£* ou *tarde* üòâ');
      return res.type('text/xml').status(200).send(twiml.toString());
    }
    s.period = sayManha ? 'manh√£' : 'tarde';
    s.step   = 'pick_slot';
    const opts = SLOTS[s.period];
    twiml.message(
      `Op√ß√µes (${s.period}):\n` +
      `1) ${opts[0]}\n` +
      `2) ${opts[1]}\n` +
      `Responda *1* ou *2*.`
    );
    return res.type('text/xml').status(200).send(twiml.toString());
  }

  // ---- escolher hor√°rio ----
  if (s.step === 'pick_slot') {
    if (!['1', '2'].includes(text)) {
      twiml.message('Responda *1* ou *2* para escolher o hor√°rio.');
      return res.type('text/xml').status(200).send(twiml.toString());
    }
    const idx = text === '1' ? 0 : 1;
    s.slot = SLOTS[s.period][idx];
    s.step = 'ask_name';
    twiml.message('Perfeito! Para finalizar, me diga seu *nome completo*.');
    return res.type('text/xml').status(200).send(twiml.toString());
  }

  // ---- capturar nome ----
  if (s.step === 'ask_name') {
    if (text.length < 2) {
      twiml.message('Pode enviar seu *nome completo*, por favor?');
      return res.type('text/xml').status(200).send(twiml.toString());
    }
    s.name = textRaw; // preserva capitaliza√ß√£o
    s.step = 'confirm';
    twiml.message(
      '‚úÖ *Resumo da avalia√ß√£o (DEMO)*\n' +
      `‚Ä¢ Nome: ${s.name}\n` +
      `‚Ä¢ Per√≠odo: ${s.period}\n` +
      `‚Ä¢ Hor√°rio: ${s.slot}\n\n` +
      'Responda: *confirmar* | *reagendar* | *cancelar*'
    );
    return res.type('text/xml').status(200).send(twiml.toString());
  }

  // ---- confirmar / reagendar / cancelar ----
  if (s.step === 'confirm') {
    if (text === 'confirmar') {
      saveLead({ key, from, name: s.name, period: s.period, slot: s.slot });
      resetSession(key);
      twiml.message('üéâ Confirmado (DEMO)! Vamos enviar as instru√ß√µes de pr√©-consulta. Se precisar, digite *menu*.');
      return res.type('text/xml').status(200).send(twiml.toString());
    }
    if (text === 'reagendar') {
      s.step = 'ask_period';
      twiml.message('Sem problemas! Prefere *manh√£* ou *tarde*?');
      return res.type('text/xml').status(200).send(twiml.toString());
    }
    if (text === 'cancelar') {
      resetSession(key);
      twiml.message('Ok, agenda cancelada (DEMO). Se quiser come√ßar de novo, digite *menu*.');
      return res.type('text/xml').status(200).send(twiml.toString());
    }
    twiml.message('Responda *confirmar*, *reagendar* ou *cancelar* üôÇ');
    return res.type('text/xml').status(200).send(twiml.toString());
  }

  // ---- fallback geral ----
  twiml.message('N√£o entendi üôÉ. Digite *menu* para as op√ß√µes.');
  return res.type('text/xml').status(200).send(twiml.toString());
});

// ===== Listen =====
app.listen(PORT, () => {
  console.log('‚úÖ Server running on port', PORT);
  console.log(`‚Ä¢ Health: http://localhost:${PORT}/health`);
  console.log('‚Ä¢ Webhook (Twilio Sandbox WhatsApp): POST /twilio/whatsapp');
});
